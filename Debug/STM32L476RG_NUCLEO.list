
STM32L476RG_NUCLEO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000005a0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08000728  08000728  00010728  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000770  08000770  00020008  2**0
                  CONTENTS
  4 .ARM          00000000  08000770  08000770  00020008  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000770  08000770  00020008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08000770  08000770  00010770  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08000778  08000778  00010778  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000008  20000000  08000780  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .sram2        00000000  10000000  10000000  00020008  2**0
                  CONTENTS
 10 .bss          00000024  20000008  20000008  00020008  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000002c  2000002c  00020008  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY
 13 .debug_line   00000e40  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_info   000025d3  00000000  00000000  00020e78  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_abbrev 00000632  00000000  00000000  0002344b  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_aranges 000000d0  00000000  00000000  00023a80  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000001a0  00000000  00000000  00023b50  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_loc    0000062c  00000000  00000000  00023cf0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_macro  00000d6d  00000000  00000000  0002431c  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_str    000a7e7c  00000000  00000000  00025089  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .comment      0000007c  00000000  00000000  000ccf05  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00000178  00000000  00000000  000ccf84  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000008 	.word	0x20000008
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800070c 	.word	0x0800070c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000000c 	.word	0x2000000c
 80001c4:	0800070c 	.word	0x0800070c

080001c8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80001c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000200 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80001cc:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80001ce:	e003      	b.n	80001d8 <LoopCopyDataInit>

080001d0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80001d0:	4b0c      	ldr	r3, [pc, #48]	; (8000204 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80001d2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80001d4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80001d6:	3104      	adds	r1, #4

080001d8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80001d8:	480b      	ldr	r0, [pc, #44]	; (8000208 <LoopForever+0xa>)
	ldr	r3, =_edata
 80001da:	4b0c      	ldr	r3, [pc, #48]	; (800020c <LoopForever+0xe>)
	adds	r2, r0, r1
 80001dc:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80001de:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80001e0:	d3f6      	bcc.n	80001d0 <CopyDataInit>
	ldr	r2, =_sbss
 80001e2:	4a0b      	ldr	r2, [pc, #44]	; (8000210 <LoopForever+0x12>)
	b	LoopFillZerobss
 80001e4:	e002      	b.n	80001ec <LoopFillZerobss>

080001e6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80001e6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80001e8:	f842 3b04 	str.w	r3, [r2], #4

080001ec <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80001ec:	4b09      	ldr	r3, [pc, #36]	; (8000214 <LoopForever+0x16>)
	cmp	r2, r3
 80001ee:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80001f0:	d3f9      	bcc.n	80001e6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80001f2:	f000 f9e9 	bl	80005c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80001f6:	f000 fa65 	bl	80006c4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80001fa:	f000 f993 	bl	8000524 <main>

080001fe <LoopForever>:

LoopForever:
    b LoopForever
 80001fe:	e7fe      	b.n	80001fe <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000200:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8000204:	08000780 	.word	0x08000780
	ldr	r0, =_sdata
 8000208:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800020c:	20000008 	.word	0x20000008
	ldr	r2, =_sbss
 8000210:	20000008 	.word	0x20000008
	ldr	r3, = _ebss
 8000214:	2000002c 	.word	0x2000002c

08000218 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000218:	e7fe      	b.n	8000218 <ADC1_2_IRQHandler>

0800021a <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 800021a:	b530      	push	{r4, r5, lr}
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800021c:	6803      	ldr	r3, [r0, #0]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800021e:	fa91 f4a1 	rbit	r4, r1
 8000222:	fab4 f484 	clz	r4, r4
 8000226:	fa91 f1a1 	rbit	r1, r1
 800022a:	2503      	movs	r5, #3
 800022c:	fab1 f181 	clz	r1, r1
 8000230:	0064      	lsls	r4, r4, #1
 8000232:	fa05 f404 	lsl.w	r4, r5, r4
 8000236:	0049      	lsls	r1, r1, #1
 8000238:	ea23 0304 	bic.w	r3, r3, r4
 800023c:	fa02 f101 	lsl.w	r1, r2, r1
 8000240:	4319      	orrs	r1, r3
 8000242:	6001      	str	r1, [r0, #0]
 8000244:	bd30      	pop	{r4, r5, pc}
	...

08000248 <GPIO_init>:
#define BUT_PIN LL_GPIO_PIN_13
#define PWM_PORT GPIOC
#define PWM_PIN LL_GPIO_PIN_10

void GPIO_init(void)
{
 8000248:	b513      	push	{r0, r1, r4, lr}
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 800024a:	4c17      	ldr	r4, [pc, #92]	; (80002a8 <GPIO_init+0x60>)
 800024c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800024e:	f043 0301 	orr.w	r3, r3, #1
 8000252:	64e3      	str	r3, [r4, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000254:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8000256:	f003 0301 	and.w	r3, r3, #1
 800025a:	9301      	str	r3, [sp, #4]
// PORT A
LL_AHB2_GRP1_EnableClock( LL_AHB2_GRP1_PERIPH_GPIOA );
// LED verte
LL_GPIO_SetPinMode(       LED_PORT, LED_PIN, LL_GPIO_MODE_OUTPUT );
 800025c:	2201      	movs	r2, #1
 800025e:	2120      	movs	r1, #32
 8000260:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  (void)tmpreg;
 8000264:	9b01      	ldr	r3, [sp, #4]
 8000266:	f7ff ffd8 	bl	800021a <LL_GPIO_SetPinMode>
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800026a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
LL_GPIO_SetPinOutputType( LED_PORT, LED_PIN, LL_GPIO_OUTPUT_PUSHPULL );

// PORT C
LL_AHB2_GRP1_EnableClock( LL_AHB2_GRP1_PERIPH_GPIOC );
// bouton bleu pin 13
LL_GPIO_SetPinMode( BUT_PORT, BUT_PIN, LL_GPIO_MODE_INPUT );
 800026e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000272:	6853      	ldr	r3, [r2, #4]
 8000274:	f023 0320 	bic.w	r3, r3, #32
 8000278:	6053      	str	r3, [r2, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800027a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800027c:	f043 0304 	orr.w	r3, r3, #4
 8000280:	64e3      	str	r3, [r4, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000282:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8000284:	4c09      	ldr	r4, [pc, #36]	; (80002ac <GPIO_init+0x64>)
 8000286:	f003 0304 	and.w	r3, r3, #4
 800028a:	9300      	str	r3, [sp, #0]
 800028c:	4620      	mov	r0, r4
 800028e:	2200      	movs	r2, #0
  (void)tmpreg;
 8000290:	9b00      	ldr	r3, [sp, #0]
 8000292:	f7ff ffc2 	bl	800021a <LL_GPIO_SetPinMode>
// PC10
LL_GPIO_SetPinMode( PWM_PORT, PWM_PIN, LL_GPIO_MODE_OUTPUT );
 8000296:	2201      	movs	r2, #1
 8000298:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800029c:	4620      	mov	r0, r4
 800029e:	f7ff ffbc 	bl	800021a <LL_GPIO_SetPinMode>

}
 80002a2:	b002      	add	sp, #8
 80002a4:	bd10      	pop	{r4, pc}
 80002a6:	bf00      	nop
 80002a8:	40021000 	.word	0x40021000
 80002ac:	48000800 	.word	0x48000800

080002b0 <LED_GREEN>:


void LED_GREEN( int val )
{
 80002b0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80002b4:	2220      	movs	r2, #32
if	( val )
 80002b6:	b108      	cbz	r0, 80002bc <LED_GREEN+0xc>
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BSRR, PinMask);
 80002b8:	619a      	str	r2, [r3, #24]
 80002ba:	4770      	bx	lr
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BRR, PinMask);
 80002bc:	629a      	str	r2, [r3, #40]	; 0x28
 80002be:	4770      	bx	lr

080002c0 <BLUE_BUTTON>:
  return ((READ_BIT(GPIOx->IDR, PinMask) == (PinMask)) ? 1UL : 0UL);
 80002c0:	4b03      	ldr	r3, [pc, #12]	; (80002d0 <BLUE_BUTTON+0x10>)
 80002c2:	6918      	ldr	r0, [r3, #16]
else	LL_GPIO_ResetOutputPin( LED_PORT, LED_PIN );
}

int BLUE_BUTTON()
{
return ( !LL_GPIO_IsInputPinSet( BUT_PORT, BUT_PIN ) );
 80002c4:	f480 5000 	eor.w	r0, r0, #8192	; 0x2000
}
 80002c8:	f3c0 3040 	ubfx	r0, r0, #13, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop
 80002d0:	48000800 	.word	0x48000800

080002d4 <SystemClock_Config2>:
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_EnableRangeSelection
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_EnableRangeSelection(void)
{
  SET_BIT(RCC->CR, RCC_CR_MSIRGSEL);
 80002d4:	4b17      	ldr	r3, [pc, #92]	; (8000334 <SystemClock_Config2+0x60>)
 80002d6:	681a      	ldr	r2, [r3, #0]
 80002d8:	f042 0208 	orr.w	r2, r2, #8
 80002dc:	601a      	str	r2, [r3, #0]
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 80002de:	681a      	ldr	r2, [r3, #0]
 80002e0:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80002e4:	f042 0290 	orr.w	r2, r2, #144	; 0x90
 80002e8:	601a      	str	r2, [r3, #0]
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80002ea:	681a      	ldr	r2, [r3, #0]
 80002ec:	f042 0201 	orr.w	r2, r2, #1
 80002f0:	601a      	str	r2, [r3, #0]
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RCC_CR_MSIRDY) ? 1UL : 0UL);
 80002f2:	681a      	ldr	r2, [r3, #0]
 80002f4:	0792      	lsls	r2, r2, #30
 80002f6:	d5fc      	bpl.n	80002f2 <SystemClock_Config2+0x1e>
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80002f8:	689a      	ldr	r2, [r3, #8]
 80002fa:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80002fe:	609a      	str	r2, [r3, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000300:	689a      	ldr	r2, [r3, #8]
 8000302:	f022 0203 	bic.w	r2, r2, #3
 8000306:	609a      	str	r2, [r3, #8]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000308:	689a      	ldr	r2, [r3, #8]
		{ };*/

	/* Sysclk activation on the main PLL */
	LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
	LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_MSI);
	while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_MSI)
 800030a:	f012 0f0c 	tst.w	r2, #12
 800030e:	d1fb      	bne.n	8000308 <SystemClock_Config2+0x34>
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000310:	689a      	ldr	r2, [r3, #8]
 8000312:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8000316:	609a      	str	r2, [r3, #8]
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000318:	689a      	ldr	r2, [r3, #8]
 800031a:	f422 5260 	bic.w	r2, r2, #14336	; 0x3800
 800031e:	609a      	str	r2, [r3, #8]
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000320:	4a05      	ldr	r2, [pc, #20]	; (8000338 <SystemClock_Config2+0x64>)
 8000322:	6813      	ldr	r3, [r2, #0]
 8000324:	f023 0307 	bic.w	r3, r3, #7
 8000328:	f043 0301 	orr.w	r3, r3, #1
 800032c:	6013      	str	r3, [r2, #0]
	LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);

	LL_FLASH_SetLatency(LL_FLASH_LATENCY_1);

	/* Update the global variable called SystemCoreClock */
	SystemCoreClockUpdate();
 800032e:	f000 b96f 	b.w	8000610 <SystemCoreClockUpdate>
 8000332:	bf00      	nop
 8000334:	40021000 	.word	0x40021000
 8000338:	40022000 	.word	0x40022000

0800033c <SysTick_Handler>:
}

void SysTick_Handler(void){
 800033c:	b510      	push	{r4, lr}
	}
	else if(stateLed){
		LED_GREEN(0);
		stateLed = 0;
	}*/
	tick++;
 800033e:	4c11      	ldr	r4, [pc, #68]	; (8000384 <SysTick_Handler+0x48>)
 8000340:	4a11      	ldr	r2, [pc, #68]	; (8000388 <SysTick_Handler+0x4c>)
 8000342:	6823      	ldr	r3, [r4, #0]
 8000344:	3301      	adds	r3, #1
	if(tick%2 == 1){
 8000346:	f003 0101 	and.w	r1, r3, #1
 800034a:	2b00      	cmp	r3, #0
 800034c:	bfb8      	it	lt
 800034e:	4249      	neglt	r1, r1
 8000350:	2901      	cmp	r1, #1
 8000352:	f44f 6180 	mov.w	r1, #1024	; 0x400
	tick++;
 8000356:	6023      	str	r3, [r4, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000358:	bf0c      	ite	eq
 800035a:	6191      	streq	r1, [r2, #24]
  WRITE_REG(GPIOx->BRR, PinMask);
 800035c:	6291      	strne	r1, [r2, #40]	; 0x28
		LL_GPIO_SetOutputPin(PWM_PORT, PWM_PIN );
	}
	else{
		LL_GPIO_ResetOutputPin(PWM_PORT, PWM_PIN );
	}
	if(tick == expe*5) {
 800035e:	6862      	ldr	r2, [r4, #4]
 8000360:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8000364:	4293      	cmp	r3, r2
 8000366:	d104      	bne.n	8000372 <SysTick_Handler+0x36>
		LED_GREEN(0);
 8000368:	2000      	movs	r0, #0
		tick = 0;
	}
	/*if(expe == 1){
		LL_LPM_EnableSleep();
	}*/
}
 800036a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		LED_GREEN(0);
 800036e:	f7ff bf9f 	b.w	80002b0 <LED_GREEN>
	else if(tick > 100) {
 8000372:	2b64      	cmp	r3, #100	; 0x64
 8000374:	dd04      	ble.n	8000380 <SysTick_Handler+0x44>
		LED_GREEN(1);
 8000376:	2001      	movs	r0, #1
 8000378:	f7ff ff9a 	bl	80002b0 <LED_GREEN>
		tick = 0;
 800037c:	2300      	movs	r3, #0
 800037e:	6023      	str	r3, [r4, #0]
 8000380:	bd10      	pop	{r4, pc}
 8000382:	bf00      	nop
 8000384:	20000024 	.word	0x20000024
 8000388:	48000800 	.word	0x48000800

0800038c <MSICalibration_Process>:
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 800038c:	4b16      	ldr	r3, [pc, #88]	; (80003e8 <MSICalibration_Process+0x5c>)
  * @rmtoll CR1          DBP           LL_PWR_EnableBkUpAccess
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableBkUpAccess(void)
{
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800038e:	4917      	ldr	r1, [pc, #92]	; (80003ec <MSICalibration_Process+0x60>)
 8000390:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000392:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000396:	659a      	str	r2, [r3, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000398:	6d9a      	ldr	r2, [r3, #88]	; 0x58

void MSICalibration_Process(void)
{
 800039a:	b082      	sub	sp, #8
 800039c:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 80003a0:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 80003a2:	9a01      	ldr	r2, [sp, #4]
 80003a4:	680a      	ldr	r2, [r1, #0]
 80003a6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80003aa:	600a      	str	r2, [r1, #0]
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RCC_BDCR_LSERDY) ? 1UL : 0UL);
 80003ac:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80003b0:	0792      	lsls	r2, r2, #30
 80003b2:	d505      	bpl.n	80003c0 <MSICalibration_Process+0x34>
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 80003b4:	681a      	ldr	r2, [r3, #0]
 80003b6:	f042 0204 	orr.w	r2, r2, #4
 80003ba:	601a      	str	r2, [r3, #0]
  /* Enable MSI clock PLL */
  LL_RCC_MSI_EnablePLLMode();

  /* Calibration success*/
  //LED_On();
}
 80003bc:	b002      	add	sp, #8
 80003be:	4770      	bx	lr
  * @rmtoll BDCR         BDRST         LL_RCC_ForceBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ForceBackupDomainReset(void)
{
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80003c0:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80003c4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80003c8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  * @rmtoll BDCR         BDRST         LL_RCC_ReleaseBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ReleaseBackupDomainReset(void)
{
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80003cc:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80003d0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80003d4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80003d8:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80003dc:	f042 0201 	orr.w	r2, r2, #1
 80003e0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 80003e4:	e7e6      	b.n	80003b4 <MSICalibration_Process+0x28>
 80003e6:	bf00      	nop
 80003e8:	40021000 	.word	0x40021000
 80003ec:	40007000 	.word	0x40007000

080003f0 <Configure_RTC>:
  SET_BIT(RCC->APB1ENR1, Periphs);
 80003f0:	4b29      	ldr	r3, [pc, #164]	; (8000498 <Configure_RTC+0xa8>)
 80003f2:	492a      	ldr	r1, [pc, #168]	; (800049c <Configure_RTC+0xac>)
 80003f4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80003f6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80003fa:	659a      	str	r2, [r3, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80003fc:	6d9a      	ldr	r2, [r3, #88]	; 0x58

void Configure_RTC(void){
 80003fe:	b082      	sub	sp, #8
 8000400:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8000404:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 8000406:	9a01      	ldr	r2, [sp, #4]
 8000408:	680a      	ldr	r2, [r1, #0]
 800040a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800040e:	600a      	str	r2, [r1, #0]
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RCC_BDCR_LSERDY) ? 1UL : 0UL);
 8000410:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8000414:	0792      	lsls	r2, r2, #30
 8000416:	d52c      	bpl.n	8000472 <Configure_RTC+0x82>
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8000418:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800041c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8000420:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000424:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8000428:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800042c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000430:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 8000434:	4b1a      	ldr	r3, [pc, #104]	; (80004a0 <Configure_RTC+0xb0>)
 8000436:	22ca      	movs	r2, #202	; 0xca
 8000438:	625a      	str	r2, [r3, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 800043a:	2253      	movs	r2, #83	; 0x53
 800043c:	625a      	str	r2, [r3, #36]	; 0x24
  WRITE_REG(RTCx->ISR, RTC_LL_INIT_MASK);
 800043e:	f04f 32ff 	mov.w	r2, #4294967295
 8000442:	60da      	str	r2, [r3, #12]
  MODIFY_REG(RTCx->CR, RTC_CR_FMT, HourFormat);
 8000444:	689a      	ldr	r2, [r3, #8]
 8000446:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800044a:	609a      	str	r2, [r3, #8]
  MODIFY_REG(RTCx->PRER, RTC_PRER_PREDIV_A, AsynchPrescaler << RTC_PRER_PREDIV_A_Pos);
 800044c:	691a      	ldr	r2, [r3, #16]
 800044e:	f442 02fe 	orr.w	r2, r2, #8323072	; 0x7f0000
 8000452:	611a      	str	r2, [r3, #16]
  MODIFY_REG(RTCx->PRER, RTC_PRER_PREDIV_S, SynchPrescaler);
 8000454:	691a      	ldr	r2, [r3, #16]
 8000456:	f422 42ff 	bic.w	r2, r2, #32640	; 0x7f80
 800045a:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 800045e:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
 8000462:	611a      	str	r2, [r3, #16]
  WRITE_REG(RTCx->ISR, (uint32_t)~RTC_ISR_INIT);
 8000464:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8000468:	60da      	str	r2, [r3, #12]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 800046a:	22ff      	movs	r2, #255	; 0xff
 800046c:	625a      	str	r2, [r3, #36]	; 0x24
	  LL_RTC_SetAsynchPrescaler(RTC, RTC_ASYNCH_PREDIV);
	  /* Set Synch Prediv (value according to source clock) */
	  LL_RTC_SetSynchPrescaler(RTC, RTC_SYNCH_PREDIV);
	  LL_RTC_DisableInitMode(RTC);
	  LL_RTC_EnableWriteProtection(RTC);
}
 800046e:	b002      	add	sp, #8
 8000470:	4770      	bx	lr
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8000472:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8000476:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800047a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800047e:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8000482:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000486:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800048a:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800048e:	f042 0201 	orr.w	r2, r2, #1
 8000492:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8000496:	e7bf      	b.n	8000418 <Configure_RTC+0x28>
 8000498:	40021000 	.word	0x40021000
 800049c:	40007000 	.word	0x40007000
 80004a0:	40002800 	.word	0x40002800

080004a4 <SystemClock_Config>:
 80004a4:	4a1c      	ldr	r2, [pc, #112]	; (8000518 <SystemClock_Config+0x74>)
 80004a6:	6813      	ldr	r3, [r2, #0]
 80004a8:	f023 0307 	bic.w	r3, r3, #7
 80004ac:	f043 0304 	orr.w	r3, r3, #4
 80004b0:	6013      	str	r3, [r2, #0]
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80004b2:	4b1a      	ldr	r3, [pc, #104]	; (800051c <SystemClock_Config+0x78>)
 80004b4:	681a      	ldr	r2, [r3, #0]
 80004b6:	f042 0201 	orr.w	r2, r2, #1
 80004ba:	601a      	str	r2, [r3, #0]
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RCC_CR_MSIRDY) ? 1UL : 0UL);
 80004bc:	681a      	ldr	r2, [r3, #0]
 80004be:	0791      	lsls	r1, r2, #30
 80004c0:	d5fc      	bpl.n	80004bc <SystemClock_Config+0x18>
  *         @arg @ref LL_RCC_PLLR_DIV_8
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLR)
{
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLR,
 80004c2:	68d9      	ldr	r1, [r3, #12]
 80004c4:	4a16      	ldr	r2, [pc, #88]	; (8000520 <SystemClock_Config+0x7c>)
 80004c6:	400a      	ands	r2, r1
 80004c8:	f442 5220 	orr.w	r2, r2, #10240	; 0x2800
 80004cc:	f042 0201 	orr.w	r2, r2, #1
 80004d0:	60da      	str	r2, [r3, #12]
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80004d2:	681a      	ldr	r2, [r3, #0]
 80004d4:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80004d8:	601a      	str	r2, [r3, #0]
  * @rmtoll PLLCFGR      PLLREN        LL_RCC_PLL_EnableDomain_SYS
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_EnableDomain_SYS(void)
{
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLREN);
 80004da:	68da      	ldr	r2, [r3, #12]
 80004dc:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80004e0:	60da      	str	r2, [r3, #12]
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RCC_CR_PLLRDY) ? 1UL : 0UL);
 80004e2:	681a      	ldr	r2, [r3, #0]
 80004e4:	0192      	lsls	r2, r2, #6
 80004e6:	d5fc      	bpl.n	80004e2 <SystemClock_Config+0x3e>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80004e8:	689a      	ldr	r2, [r3, #8]
 80004ea:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80004ee:	609a      	str	r2, [r3, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80004f0:	689a      	ldr	r2, [r3, #8]
 80004f2:	f042 0203 	orr.w	r2, r2, #3
 80004f6:	609a      	str	r2, [r3, #8]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80004f8:	689a      	ldr	r2, [r3, #8]
 80004fa:	f002 020c 	and.w	r2, r2, #12
	{ };
  
/* Sysclk activation on the main PLL */
LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 80004fe:	2a0c      	cmp	r2, #12
 8000500:	d1fa      	bne.n	80004f8 <SystemClock_Config+0x54>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000502:	689a      	ldr	r2, [r3, #8]
 8000504:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8000508:	609a      	str	r2, [r3, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800050a:	689a      	ldr	r2, [r3, #8]
 800050c:	f422 5260 	bic.w	r2, r2, #14336	; 0x3800
 8000510:	609a      	str	r2, [r3, #8]
/* Set APB1 & APB2 prescaler*/
LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);

/* Update the global variable called SystemCoreClock */
SystemCoreClockUpdate();
 8000512:	f000 b87d 	b.w	8000610 <SystemCoreClockUpdate>
 8000516:	bf00      	nop
 8000518:	40022000 	.word	0x40022000
 800051c:	40021000 	.word	0x40021000
 8000520:	f9ff808c 	.word	0xf9ff808c

08000524 <main>:
{
 8000524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
if (expe == 2){
 8000526:	4c22      	ldr	r4, [pc, #136]	; (80005b0 <main+0x8c>)
 8000528:	6863      	ldr	r3, [r4, #4]
 800052a:	2b02      	cmp	r3, #2
 800052c:	d13d      	bne.n	80005aa <main+0x86>
	SystemClock_Config2();
 800052e:	f7ff fed1 	bl	80002d4 <SystemClock_Config2>
GPIO_init();
 8000532:	f7ff fe89 	bl	8000248 <GPIO_init>
SysTick_Config(SystemCoreClock/100);
 8000536:	4b1f      	ldr	r3, [pc, #124]	; (80005b4 <main+0x90>)
 8000538:	2264      	movs	r2, #100	; 0x64
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	fbb3 f3f2 	udiv	r3, r3, r2
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000540:	3b01      	subs	r3, #1
 8000542:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000546:	d209      	bcs.n	800055c <main+0x38>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000548:	4a1b      	ldr	r2, [pc, #108]	; (80005b8 <main+0x94>)
 800054a:	6053      	str	r3, [r2, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800054c:	4b1b      	ldr	r3, [pc, #108]	; (80005bc <main+0x98>)
 800054e:	21f0      	movs	r1, #240	; 0xf0
 8000550:	f883 1023 	strb.w	r1, [r3, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000554:	2300      	movs	r3, #0
 8000556:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000558:	2307      	movs	r3, #7
 800055a:	6013      	str	r3, [r2, #0]

  tmp = (uint32_t)(&(RTCx->BKP0R));
  tmp += (BackupRegister * 4U);

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 800055c:	4d18      	ldr	r5, [pc, #96]	; (80005c0 <main+0x9c>)
Configure_RTC();
 800055e:	f7ff ff47 	bl	80003f0 <Configure_RTC>
 8000562:	6d2b      	ldr	r3, [r5, #80]	; 0x50
expe = LL_RTC_BAK_GetRegister(RTC, LL_RTC_BKP_DR0);
 8000564:	6063      	str	r3, [r4, #4]
if(BLUE_BUTTON()){
 8000566:	f7ff feab 	bl	80002c0 <BLUE_BUTTON>
 800056a:	b118      	cbz	r0, 8000574 <main+0x50>
	expe++;
 800056c:	6863      	ldr	r3, [r4, #4]
 800056e:	3301      	adds	r3, #1
 8000570:	6063      	str	r3, [r4, #4]
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8000572:	652b      	str	r3, [r5, #80]	; 0x50
if(expe == 2) {
 8000574:	6863      	ldr	r3, [r4, #4]
 8000576:	2b02      	cmp	r3, #2
 8000578:	d101      	bne.n	800057e <main+0x5a>
	MSICalibration_Process();
 800057a:	f7ff ff07 	bl	800038c <MSICalibration_Process>
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableSleep(void)
{
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800057e:	4e0f      	ldr	r6, [pc, #60]	; (80005bc <main+0x98>)
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 8000580:	4f10      	ldr	r7, [pc, #64]	; (80005c4 <main+0xa0>)
		__WFI();
 8000582:	2500      	movs	r5, #0
	if	( BLUE_BUTTON() ) {
 8000584:	f7ff fe9c 	bl	80002c0 <BLUE_BUTTON>
 8000588:	b908      	cbnz	r0, 800058e <main+0x6a>
	if(stateButton == 1){
 800058a:	2d00      	cmp	r5, #0
 800058c:	d0fa      	beq.n	8000584 <main+0x60>
		if(expe == 2) {
 800058e:	6863      	ldr	r3, [r4, #4]
 8000590:	2b02      	cmp	r3, #2
 8000592:	bf02      	ittt	eq
 8000594:	683b      	ldreq	r3, [r7, #0]
 8000596:	f043 0304 	orreq.w	r3, r3, #4
 800059a:	603b      	streq	r3, [r7, #0]
 800059c:	6933      	ldr	r3, [r6, #16]
 800059e:	f023 0304 	bic.w	r3, r3, #4
 80005a2:	6133      	str	r3, [r6, #16]
		__WFI();
 80005a4:	bf30      	wfi
 80005a6:	2501      	movs	r5, #1
 80005a8:	e7ec      	b.n	8000584 <main+0x60>
else SystemClock_Config();
 80005aa:	f7ff ff7b 	bl	80004a4 <SystemClock_Config>
 80005ae:	e7c0      	b.n	8000532 <main+0xe>
 80005b0:	20000024 	.word	0x20000024
 80005b4:	20000000 	.word	0x20000000
 80005b8:	e000e010 	.word	0xe000e010
 80005bc:	e000ed00 	.word	0xe000ed00
 80005c0:	40002800 	.word	0x40002800
 80005c4:	40021000 	.word	0x40021000

080005c8 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80005c8:	490f      	ldr	r1, [pc, #60]	; (8000608 <SystemInit+0x40>)
 80005ca:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80005ce:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80005d6:	4b0d      	ldr	r3, [pc, #52]	; (800060c <SystemInit+0x44>)
 80005d8:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80005da:	2000      	movs	r0, #0
  RCC->CR |= RCC_CR_MSION;
 80005dc:	f042 0201 	orr.w	r2, r2, #1
 80005e0:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 80005e2:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= (uint32_t)0xEAF6FFFF;
 80005e4:	681a      	ldr	r2, [r3, #0]
 80005e6:	f022 52a8 	bic.w	r2, r2, #352321536	; 0x15000000
 80005ea:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 80005ee:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000;
 80005f0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80005f4:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80005f6:	681a      	ldr	r2, [r3, #0]
 80005f8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80005fc:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80005fe:	6198      	str	r0, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000600:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000604:	608b      	str	r3, [r1, #8]
 8000606:	4770      	bx	lr
 8000608:	e000ed00 	.word	0xe000ed00
 800060c:	40021000 	.word	0x40021000

08000610 <SystemCoreClockUpdate>:
void SystemCoreClockUpdate(void)
{
  uint32_t tmp = 0, msirange = 0, pllvco = 0, pllr = 2, pllsource = 0, pllm = 2;

  /* Get MSI Range frequency--------------------------------------------------*/
  if((RCC->CR & RCC_CR_MSIRGSEL) == RESET)
 8000610:	4a27      	ldr	r2, [pc, #156]	; (80006b0 <SystemCoreClockUpdate+0xa0>)
 8000612:	4928      	ldr	r1, [pc, #160]	; (80006b4 <SystemCoreClockUpdate+0xa4>)
 8000614:	6813      	ldr	r3, [r2, #0]
 8000616:	071b      	lsls	r3, r3, #28
  { /* MSISRANGE from RCC_CSR applies */
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8;
 8000618:	bf54      	ite	pl
 800061a:	f8d2 3094 	ldrpl.w	r3, [r2, #148]	; 0x94
  }
  else
  { /* MSIRANGE from RCC_CR applies */
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4;
 800061e:	6813      	ldrmi	r3, [r2, #0]
  }
  /*MSI frequency range in HZ*/
  msirange = MSIRangeTable[msirange];

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000620:	6890      	ldr	r0, [r2, #8]
{
 8000622:	b530      	push	{r4, r5, lr}
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8;
 8000624:	bf54      	ite	pl
 8000626:	f3c3 2303 	ubfxpl	r3, r3, #8, #4
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4;
 800062a:	f3c3 1303 	ubfxmi	r3, r3, #4, #4
  msirange = MSIRangeTable[msirange];
 800062e:	4c22      	ldr	r4, [pc, #136]	; (80006b8 <SystemCoreClockUpdate+0xa8>)
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000630:	f000 000c 	and.w	r0, r0, #12
  msirange = MSIRangeTable[msirange];
 8000634:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000638:	280c      	cmp	r0, #12
 800063a:	d836      	bhi.n	80006aa <SystemCoreClockUpdate+0x9a>
 800063c:	e8df f000 	tbb	[pc, r0]
 8000640:	35353535 	.word	0x35353535
 8000644:	35353507 	.word	0x35353507
 8000648:	35353513 	.word	0x35353513
 800064c:	15          	.byte	0x15
 800064d:	00          	.byte	0x00
    case 0x00:  /* MSI used as system clock source */
      SystemCoreClock = msirange;
      break;

    case 0x04:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 800064e:	4b1b      	ldr	r3, [pc, #108]	; (80006bc <SystemCoreClockUpdate+0xac>)
          pllvco = (msirange / pllm);
          break;
      }
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8);
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25) + 1) * 2;
      SystemCoreClock = pllvco/pllr;
 8000650:	600b      	str	r3, [r1, #0]
      SystemCoreClock = msirange;
      break;
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8000652:	6893      	ldr	r3, [r2, #8]
 8000654:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000658:	441c      	add	r4, r3
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 800065a:	680b      	ldr	r3, [r1, #0]
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 800065c:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
  SystemCoreClock >>= tmp;
 8000660:	40d3      	lsrs	r3, r2
 8000662:	600b      	str	r3, [r1, #0]
 8000664:	bd30      	pop	{r4, r5, pc}
      SystemCoreClock = HSE_VALUE;
 8000666:	4b16      	ldr	r3, [pc, #88]	; (80006c0 <SystemCoreClockUpdate+0xb0>)
 8000668:	e7f2      	b.n	8000650 <SystemCoreClockUpdate+0x40>
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800066a:	68d0      	ldr	r0, [r2, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4) + 1 ;
 800066c:	68d3      	ldr	r3, [r2, #12]
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800066e:	f000 0003 	and.w	r0, r0, #3
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4) + 1 ;
 8000672:	f3c3 1302 	ubfx	r3, r3, #4, #3
      switch (pllsource)
 8000676:	2802      	cmp	r0, #2
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4) + 1 ;
 8000678:	f103 0301 	add.w	r3, r3, #1
      switch (pllsource)
 800067c:	d004      	beq.n	8000688 <SystemCoreClockUpdate+0x78>
 800067e:	2803      	cmp	r0, #3
 8000680:	d011      	beq.n	80006a6 <SystemCoreClockUpdate+0x96>
          pllvco = (msirange / pllm);
 8000682:	fbb5 f3f3 	udiv	r3, r5, r3
          break;
 8000686:	e002      	b.n	800068e <SystemCoreClockUpdate+0x7e>
          pllvco = (HSI_VALUE / pllm);
 8000688:	480c      	ldr	r0, [pc, #48]	; (80006bc <SystemCoreClockUpdate+0xac>)
          pllvco = (HSE_VALUE / pllm);
 800068a:	fbb0 f3f3 	udiv	r3, r0, r3
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8);
 800068e:	68d5      	ldr	r5, [r2, #12]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25) + 1) * 2;
 8000690:	68d0      	ldr	r0, [r2, #12]
 8000692:	f3c0 6041 	ubfx	r0, r0, #25, #2
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8);
 8000696:	f3c5 2506 	ubfx	r5, r5, #8, #7
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25) + 1) * 2;
 800069a:	3001      	adds	r0, #1
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8);
 800069c:	436b      	muls	r3, r5
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25) + 1) * 2;
 800069e:	0040      	lsls	r0, r0, #1
      SystemCoreClock = pllvco/pllr;
 80006a0:	fbb3 f3f0 	udiv	r3, r3, r0
 80006a4:	e7d4      	b.n	8000650 <SystemCoreClockUpdate+0x40>
          pllvco = (HSE_VALUE / pllm);
 80006a6:	4806      	ldr	r0, [pc, #24]	; (80006c0 <SystemCoreClockUpdate+0xb0>)
 80006a8:	e7ef      	b.n	800068a <SystemCoreClockUpdate+0x7a>
      SystemCoreClock = msirange;
 80006aa:	600d      	str	r5, [r1, #0]
      break;
 80006ac:	e7d1      	b.n	8000652 <SystemCoreClockUpdate+0x42>
 80006ae:	bf00      	nop
 80006b0:	40021000 	.word	0x40021000
 80006b4:	20000000 	.word	0x20000000
 80006b8:	08000728 	.word	0x08000728
 80006bc:	00f42400 	.word	0x00f42400
 80006c0:	007a1200 	.word	0x007a1200

080006c4 <__libc_init_array>:
 80006c4:	b570      	push	{r4, r5, r6, lr}
 80006c6:	4e0d      	ldr	r6, [pc, #52]	; (80006fc <__libc_init_array+0x38>)
 80006c8:	4c0d      	ldr	r4, [pc, #52]	; (8000700 <__libc_init_array+0x3c>)
 80006ca:	1ba4      	subs	r4, r4, r6
 80006cc:	10a4      	asrs	r4, r4, #2
 80006ce:	2500      	movs	r5, #0
 80006d0:	42a5      	cmp	r5, r4
 80006d2:	d109      	bne.n	80006e8 <__libc_init_array+0x24>
 80006d4:	4e0b      	ldr	r6, [pc, #44]	; (8000704 <__libc_init_array+0x40>)
 80006d6:	4c0c      	ldr	r4, [pc, #48]	; (8000708 <__libc_init_array+0x44>)
 80006d8:	f000 f818 	bl	800070c <_init>
 80006dc:	1ba4      	subs	r4, r4, r6
 80006de:	10a4      	asrs	r4, r4, #2
 80006e0:	2500      	movs	r5, #0
 80006e2:	42a5      	cmp	r5, r4
 80006e4:	d105      	bne.n	80006f2 <__libc_init_array+0x2e>
 80006e6:	bd70      	pop	{r4, r5, r6, pc}
 80006e8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80006ec:	4798      	blx	r3
 80006ee:	3501      	adds	r5, #1
 80006f0:	e7ee      	b.n	80006d0 <__libc_init_array+0xc>
 80006f2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80006f6:	4798      	blx	r3
 80006f8:	3501      	adds	r5, #1
 80006fa:	e7f2      	b.n	80006e2 <__libc_init_array+0x1e>
 80006fc:	08000770 	.word	0x08000770
 8000700:	08000770 	.word	0x08000770
 8000704:	08000770 	.word	0x08000770
 8000708:	08000774 	.word	0x08000774

0800070c <_init>:
 800070c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800070e:	bf00      	nop
 8000710:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000712:	bc08      	pop	{r3}
 8000714:	469e      	mov	lr, r3
 8000716:	4770      	bx	lr

08000718 <_fini>:
 8000718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800071a:	bf00      	nop
 800071c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800071e:	bc08      	pop	{r3}
 8000720:	469e      	mov	lr, r3
 8000722:	4770      	bx	lr
 8000724:	0000      	movs	r0, r0
	...
